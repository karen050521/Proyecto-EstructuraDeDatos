#!/usr/bin/env python3
"""
Pruebas del juego completo - Validaci√≥n de integraci√≥n y mec√°nicas del juego
Incluye escenarios completos desde inicio hasta fin del juego
"""

import sys
import os
import json
import tempfile

# Agregar el directorio ra√≠z del proyecto al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), ".."))

from logic.obstaculo import Obstaculo, TipoObstaculo
from logic.carrito import Carrito, EstadoCarrito
from logic.gestor_juego import GestorJuego, EstadoJuego


def test_inicializacion_juego():
    """Prueba: Inicializaci√≥n completa del juego"""
    print("üß™ Probando inicializaci√≥n del juego...")

    gestor = GestorJuego()

    # Verificar estado inicial
    assert gestor.estado_actual == EstadoJuego.MENU_INICIAL, (
        "Estado inicial debe ser MENU_INICIAL"
    )
    assert gestor.carrito is None, "Carrito debe ser None inicialmente"
    assert gestor.distancia_recorrida == 0, "Distancia recorrida debe ser 0"
    assert gestor.puntuacion == 0, "Puntuaci√≥n debe ser 0"
    assert gestor.arbol_obstaculos.esta_vacio(), "√Årbol de obst√°culos debe estar vac√≠o"

    # Inicializar juego
    gestor.inicializar_juego()

    assert gestor.estado_actual == EstadoJuego.JUGANDO, "Estado debe ser JUGANDO"
    assert gestor.carrito is not None, "Debe tener un carrito"
    assert gestor.carrito.x == 50, "Carrito debe estar en posici√≥n inicial X=50"
    assert gestor.carrito.y == 1, "Carrito debe estar en carril medio Y=1"
    assert gestor.carrito.energia_actual == 100, "Carrito debe tener energ√≠a completa"

    print("‚úÖ Inicializaci√≥n del juego: PAS√ì")


def test_carga_configuracion_json():
    """Prueba: Carga de configuraci√≥n desde JSON"""
    print("üß™ Probando carga de configuraci√≥n JSON...")

    # Crear configuraci√≥n de prueba
    config_json = {
        "configuracion": {
            "distancia_total": 2000,
            "velocidad_carrito": 10,
            "refresco_ms": 200,
            "altura_salto": 50,
            "color_carrito_inicial": "azul",
        },
        "obstaculos": [
            {"x": 150, "y": 0, "tipo": "roca"},
            {"x": 320, "y": 1, "tipo": "cono"},
            {"x": 500, "y": 2, "tipo": "hueco"},
            {"x": 750, "y": 0, "tipo": "aceite"},
            {"x": 1000, "y": 1, "tipo": "barrera"},
        ],
    }

    # Crear archivo temporal
    with tempfile.NamedTemporaryFile(mode="w", suffix=".json", delete=False) as f:
        json.dump(config_json, f, indent=2)
        temp_file = f.name

    try:
        gestor = GestorJuego(temp_file)
        resultado = gestor.cargar_configuracion()

        assert resultado == True, "Debe cargar configuraci√≥n exitosamente"
        assert gestor.distancia_total == 2000, "Debe cargar distancia_total"
        assert gestor.velocidad_carrito == 10, "Debe cargar velocidad_carrito"
        assert gestor.refresco_ms == 200, "Debe cargar refresco_ms"
        assert gestor.altura_salto == 50, "Debe cargar altura_salto"
        assert gestor.color_carrito_inicial == "azul", (
            "Debe cargar color_carrito_inicial"
        )

        # Verificar obst√°culos cargados
        assert gestor.arbol_obstaculos.obtener_total_obstaculos() == 5, (
            "Debe cargar 5 obst√°culos"
        )

        # Verificar que los obst√°culos est√°n en el √°rbol
        obstaculos = gestor.arbol_obstaculos.recorrido_en_profundidad()
        coordenadas = [(obs.x, obs.y) for obs in obstaculos]

        assert (150, 0) in coordenadas, "Debe tener obst√°culo en (150,0)"
        assert (320, 1) in coordenadas, "Debe tener obst√°culo en (320,1)"
        assert (500, 2) in coordenadas, "Debe tener obst√°culo en (500,2)"
        assert (750, 0) in coordenadas, "Debe tener obst√°culo en (750,0)"
        assert (1000, 1) in coordenadas, "Debe tener obst√°culo en (1000,1)"

    finally:
        os.unlink(temp_file)

    print("‚úÖ Carga de configuraci√≥n JSON: PAS√ì")


def test_mecanicas_juego_basicas():
    """Prueba: Mec√°nicas b√°sicas del juego"""
    print("üß™ Probando mec√°nicas b√°sicas del juego...")

    gestor = GestorJuego()
    gestor.inicializar_juego()

    carrito = gestor.carrito

    # Probar movimiento autom√°tico
    posicion_inicial = carrito.x
    carrito.mover_automaticamente()
    assert carrito.x > posicion_inicial, "Carrito debe moverse autom√°ticamente"

    # Probar control manual
    carrito.mover_arriba()
    assert carrito.y == 2, "Debe moverse al carril superior"

    carrito.mover_abajo()
    assert carrito.y == 1, "Debe volver al carril medio"

    # Probar salto
    carrito.saltar()
    assert carrito.estado == EstadoCarrito.SALTANDO, "Debe estar saltando"

    # Simular finalizaci√≥n del salto
    for _ in range(25):
        carrito.actualizar_salto()
    assert carrito.estado == EstadoCarrito.NORMAL, "Debe volver al estado normal"

    print("‚úÖ Mec√°nicas b√°sicas del juego: PAS√ì")


def test_obstaculos_visibles():
    """Prueba: Sistema de obst√°culos visibles"""
    print("üß™ Probando sistema de obst√°culos visibles...")

    gestor = GestorJuego()
    gestor.inicializar_juego()

    # Agregar obst√°culos en diferentes posiciones
    obstaculos = [
        (100, 1, TipoObstaculo.ROCA),  # Cerca del carrito
        (150, 0, TipoObstaculo.CONO),  # En rango de visi√≥n
        (200, 2, TipoObstaculo.HUECO),  # En rango de visi√≥n
        (300, 1, TipoObstaculo.ACEITE),  # Fuera de rango inicial
        (500, 0, TipoObstaculo.BARRERA),  # Muy lejos
    ]

    for x, y, tipo in obstaculos:
        gestor.agregar_obstaculo(x, y, tipo)

    # Posicionar carrito y actualizar obst√°culos visibles
    carrito = gestor.carrito
    carrito.x = 90  # Cerca de los primeros obst√°culos
    gestor.actualizar_obstaculos_visibles()

    # Debe encontrar obst√°culos en el rango de visi√≥n
    assert len(gestor.obstaculos_visibles) > 0, "Debe encontrar obst√°culos visibles"

    # Mover carrito m√°s adelante
    carrito.x = 250
    gestor.actualizar_obstaculos_visibles()

    # Debe encontrar diferentes obst√°culos
    assert len(gestor.obstaculos_visibles) >= 0, "Debe actualizar obst√°culos visibles"

    print("‚úÖ Sistema de obst√°culos visibles: PAS√ì")


def test_deteccion_colisiones():
    """Prueba: Detecci√≥n y procesamiento de colisiones"""
    print("üß™ Probando detecci√≥n de colisiones...")

    gestor = GestorJuego()
    gestor.inicializar_juego()

    # Agregar obst√°culo estrat√©gicamente
    gestor.agregar_obstaculo(100, 1, TipoObstaculo.ROCA)  # En carril medio

    carrito = gestor.carrito

    # Posicionar carrito para colisi√≥n
    carrito.x = 100
    carrito.y = 1

    # Actualizar obst√°culos visibles
    gestor.actualizar_obstaculos_visibles()

    # Verificar colisiones
    colisiones = gestor.verificar_colisiones()
    assert len(colisiones) > 0, "Debe detectar colisi√≥n"

    # Procesar colisi√≥n
    energia_inicial = carrito.energia_actual
    gestor.procesar_colision(colisiones[0])

    assert carrito.energia_actual < energia_inicial, "Carrito debe perder energ√≠a"
    assert carrito.estado == EstadoCarrito.COLISIONANDO, (
        "Carrito debe estar en estado de colisi√≥n"
    )

    print("‚úÖ Detecci√≥n de colisiones: PAS√ì")


def test_sistema_energia():
    """Prueba: Sistema de energ√≠a y da√±o por tipo de obst√°culo"""
    print("üß™ Probando sistema de energ√≠a...")

    gestor = GestorJuego()
    gestor.inicializar_juego()

    carrito = gestor.carrito

    # Probar da√±o por diferentes tipos de obst√°culos
    tipos_da√±o = [
        (TipoObstaculo.ROCA, 20),
        (TipoObstaculo.CONO, 10),
        (TipoObstaculo.HUECO, 15),
        (TipoObstaculo.ACEITE, 5),
        (TipoObstaculo.BARRERA, 25),
    ]

    for tipo, da√±o_esperado in tipos_da√±o:
        # Restaurar energ√≠a
        carrito.energia_actual = 100

        # Crear obst√°culo y procesar colisi√≥n
        obstaculo = Obstaculo(100, 1, tipo)
        energia_antes = carrito.energia_actual
        gestor.procesar_colision(obstaculo)

        assert carrito.energia_actual == energia_antes - da√±o_esperado, (
            f"Da√±o debe ser {da√±o_esperado} para {tipo}"
        )

    print("‚úÖ Sistema de energ√≠a: PAS√ì")


def test_condiciones_fin_juego():
    """Prueba: Condiciones de fin del juego"""
    print("üß™ Probando condiciones de fin del juego...")

    gestor = GestorJuego()
    gestor.inicializar_juego()

    carrito = gestor.carrito

    # Condici√≥n 1: Sin energ√≠a
    carrito.energia_actual = 0
    assert gestor.verificar_condiciones_fin_juego() == True, "Debe terminar sin energ√≠a"

    # Condici√≥n 2: Alcanzar distancia total
    carrito.energia_actual = 100  # Restaurar energ√≠a
    gestor.distancia_recorrida = gestor.distancia_total + 10
    assert gestor.verificar_condiciones_fin_juego() == True, (
        "Debe terminar al alcanzar meta"
    )

    # Condici√≥n 3: Juego normal (no debe terminar)
    carrito.energia_actual = 50
    gestor.distancia_recorrida = 100
    assert gestor.verificar_condiciones_fin_juego() == False, (
        "No debe terminar en condiciones normales"
    )

    print("‚úÖ Condiciones de fin del juego: PAS√ì")


def test_escenario_juego_completo():
    """Prueba: Escenario completo de juego"""
    print("üß™ Probando escenario completo de juego...")

    gestor = GestorJuego()
    gestor.inicializar_juego()

    # Crear un nivel con obst√°culos estrat√©gicos
    obstaculos_nivel = [
        (100, 1, TipoObstaculo.ROCA),  # Obst√°culo en carril medio
        (150, 0, TipoObstaculo.CONO),  # Obst√°culo en carril abajo
        (200, 2, TipoObstaculo.HUECO),  # Obst√°culo en carril arriba
        (250, 1, TipoObstaculo.ACEITE),  # Obst√°culo en carril medio
        (300, 0, TipoObstaculo.BARRERA),  # Obst√°culo en carril abajo
        (350, 2, TipoObstaculo.ROCA),  # Obst√°culo en carril arriba
        (400, 1, TipoObstaculo.CONO),  # Obst√°culo en carril medio
    ]

    for x, y, tipo in obstaculos_nivel:
        gestor.agregar_obstaculo(x, y, tipo)

    carrito = gestor.carrito

    # Simular juego: avanzar y esquivar obst√°culos
    for paso in range(50):
        # Mover carrito autom√°ticamente
        carrito.mover_automaticamente()

        # Actualizar obst√°culos visibles
        gestor.actualizar_obstaculos_visibles()

        # Verificar colisiones
        colisiones = gestor.verificar_colisiones()

        if colisiones:
            # Esquivar obst√°culos moviendo a carriles libres
            if carrito.y == 1:  # Si est√° en carril medio
                carrito.mover_arriba()  # Mover arriba
            elif carrito.y == 2:  # Si est√° arriba
                carrito.mover_abajo()  # Mover abajo
            else:  # Si est√° abajo
                carrito.mover_arriba()  # Mover arriba

        # Actualizar distancia recorrida
        gestor.distancia_recorrida = carrito.x - 50

        # Verificar que el carrito sigue vivo
        if not carrito.esta_vivo():
            break

        # Verificar que no se alcanz√≥ la meta
        if gestor.distancia_recorrida >= gestor.distancia_total:
            break

    # Verificar estado final
    assert gestor.estado_actual == EstadoJuego.JUGANDO, "Juego debe seguir activo"
    assert carrito.esta_vivo() == True, "Carrito debe seguir vivo"
    assert gestor.distancia_recorrida > 0, "Debe haber avanzado algo"

    print("‚úÖ Escenario completo de juego: PAS√ì")


def test_estadisticas_juego():
    """Prueba: Sistema de estad√≠sticas del juego"""
    print("üß™ Probando sistema de estad√≠sticas...")

    gestor = GestorJuego()
    gestor.inicializar_juego()

    # Agregar algunos obst√°culos
    gestor.agregar_obstaculo(100, 1, TipoObstaculo.ROCA)
    gestor.agregar_obstaculo(150, 0, TipoObstaculo.CONO)

    # Simular algo de progreso
    carrito = gestor.carrito
    carrito.x = 120
    carrito.recibir_da√±o(20)
    gestor.distancia_recorrida = 70
    gestor.puntuacion = 100

    # Obtener estad√≠sticas
    stats = gestor.obtener_estadisticas()

    # Verificar que todas las estad√≠sticas est√°n presentes
    assert "distancia_recorrida" in stats, "Debe incluir distancia_recorrida"
    assert "distancia_total" in stats, "Debe incluir distancia_total"
    assert "progreso_porcentaje" in stats, "Debe incluir progreso_porcentaje"
    assert "puntuacion" in stats, "Debe incluir puntuacion"
    assert "tiempo_juego" in stats, "Debe incluir tiempo_juego"
    assert "energia_porcentaje" in stats, "Debe incluir energia_porcentaje"
    assert "obstaculos_visibles" in stats, "Debe incluir obstaculos_visibles"
    assert "total_obstaculos" in stats, "Debe incluir total_obstaculos"
    assert "estado_juego" in stats, "Debe incluir estado_juego"

    # Verificar valores
    assert stats["distancia_recorrida"] == 70, "Distancia recorrida debe ser 70"
    assert stats["distancia_total"] == 2000, "Distancia total debe ser 2000"
    assert stats["puntuacion"] == 100, "Puntuaci√≥n debe ser 100"
    assert stats["total_obstaculos"] == 2, "Debe tener 2 obst√°culos"
    assert stats["estado_juego"] == "jugando", "Estado debe ser jugando"

    print("‚úÖ Sistema de estad√≠sticas: PAS√ì")


def test_pausa_y_reinicio():
    """Prueba: Sistema de pausa y reinicio"""
    print("üß™ Probando sistema de pausa y reinicio...")

    gestor = GestorJuego()
    gestor.inicializar_juego()

    # Agregar obst√°culos
    gestor.agregar_obstaculo(100, 1, TipoObstaculo.ROCA)

    # Simular progreso
    carrito = gestor.carrito
    carrito.x = 120
    carrito.recibir_da√±o(30)
    gestor.distancia_recorrida = 70
    gestor.puntuacion = 150

    # Pausar juego
    gestor.pausar_juego()
    assert gestor.estado_actual == EstadoJuego.PAUSADO, "Debe estar pausado"

    # Despausar juego
    gestor.pausar_juego()
    assert gestor.estado_actual == EstadoJuego.JUGANDO, "Debe volver a jugando"

    # Reiniciar juego
    gestor.reiniciar_juego()
    assert gestor.estado_actual == EstadoJuego.JUGANDO, "Debe estar jugando"
    assert gestor.distancia_recorrida == 0, "Distancia debe ser 0"
    assert gestor.puntuacion == 0, "Puntuaci√≥n debe ser 0"
    assert carrito.x == 50, "Carrito debe estar en posici√≥n inicial"
    assert carrito.y == 1, "Carrito debe estar en carril inicial"
    assert carrito.energia_actual == 100, "Carrito debe tener energ√≠a completa"

    print("‚úÖ Sistema de pausa y reinicio: PAS√ì")


def main():
    """Ejecuta todas las pruebas del juego completo"""
    print("üöÄ Iniciando pruebas del juego completo...\n")
    print("=" * 50)

    try:
        test_inicializacion_juego()
        print()

        test_carga_configuracion_json()
        print()

        test_mecanicas_juego_basicas()
        print()

        test_obstaculos_visibles()
        print()

        test_deteccion_colisiones()
        print()

        test_sistema_energia()
        print()

        test_condiciones_fin_juego()
        print()

        test_escenario_juego_completo()
        print()

        test_estadisticas_juego()
        print()

        test_pausa_y_reinicio()
        print()

        print("=" * 50)
        print("üéâ ¬°TODAS LAS PRUEBAS DEL JUEGO COMPLETO PASARON!")
        print("‚úÖ Integraci√≥n y mec√°nicas del juego validadas")

        return True

    except AssertionError as e:
        print(f"‚ùå Error en las pruebas: {e}")
        return False
    except Exception as e:
        print(f"üí• Error inesperado: {e}")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
