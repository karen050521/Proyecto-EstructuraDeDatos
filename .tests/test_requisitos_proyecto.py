#!/usr/bin/env python3
"""
Pruebas de requisitos del proyecto - Validaci√≥n espec√≠fica seg√∫n definicion.md
Valida cada punto de calificaci√≥n y requisito t√©cnico del proyecto
"""

import sys
import os
import json
import tempfile

# Agregar el directorio ra√≠z del proyecto al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), ".."))

from logic.obstaculo import Obstaculo, TipoObstaculo
from logic.nodo_avl import NodoAVL
from logic.arbol_avl import ArbolAVL
from logic.carrito import Carrito, EstadoCarrito
from logic.gestor_juego import GestorJuego, EstadoJuego


def test_carga_y_representacion_arbol():
    """
    Prueba: Carga y representaci√≥n del √°rbol (0.5 puntos)
    - Carga desde JSON
    - Representaci√≥n gr√°fica del √°rbol
    """
    print("üß™ Probando carga y representaci√≥n del √°rbol...")

    # Crear archivo JSON de prueba
    config_json = {
        "configuracion": {
            "distancia_total": 2000,
            "velocidad_carrito": 10,
            "refresco_ms": 200,
            "altura_salto": 50,
            "color_carrito_inicial": "azul",
        },
        "obstaculos": [
            {"x": 150, "y": 0, "tipo": "roca"},
            {"x": 320, "y": 1, "tipo": "cono"},
            {"x": 500, "y": 2, "tipo": "hueco"},
            {"x": 1200, "y": 1, "tipo": "aceite"},
        ],
    }

    # Crear archivo temporal
    with tempfile.NamedTemporaryFile(mode="w", suffix=".json", delete=False) as f:
        json.dump(config_json, f, indent=2)
        temp_file = f.name

    try:
        # Probar carga desde JSON
        gestor = GestorJuego(temp_file)
        resultado_carga = gestor.cargar_configuracion()

        assert resultado_carga == True, "Debe cargar la configuraci√≥n correctamente"
        assert gestor.distancia_total == 2000, "Debe cargar distancia_total"
        assert gestor.velocidad_carrito == 10, "Debe cargar velocidad_carrito"
        assert gestor.refresco_ms == 200, "Debe cargar refresco_ms"
        assert gestor.altura_salto == 50, "Debe cargar altura_salto"
        assert gestor.color_carrito_inicial == "azul", (
            "Debe cargar color_carrito_inicial"
        )

        # Verificar que se cargaron los obst√°culos
        assert gestor.arbol_obstaculos.obtener_total_obstaculos() == 4, (
            "Debe cargar 4 obst√°culos"
        )

        # Verificar representaci√≥n del √°rbol (estructura)
        assert not gestor.arbol_obstaculos.esta_vacio(), "El √°rbol no debe estar vac√≠o"

        # Verificar que el √°rbol mantiene balance
        obstaculos = gestor.arbol_obstaculos.recorrido_en_profundidad()
        assert len(obstaculos) == 4, "Debe tener 4 obst√°culos en el recorrido"

        print("‚úÖ Carga y representaci√≥n del √°rbol: PAS√ì")

    finally:
        # Limpiar archivo temporal
        os.unlink(temp_file)


def test_recorridos_graficos_arbol():
    """
    Prueba: Recorridos gr√°ficos del √°rbol (1.0 puntos)
    - Recorrido en anchura (BFS)
    - Recorrido en profundidad (in-order)
    """
    print("üß™ Probando recorridos gr√°ficos del √°rbol...")

    arbol = ArbolAVL()

    # Insertar obst√°culos en orden espec√≠fico para probar recorridos
    obstaculos = [
        Obstaculo(100, 1, TipoObstaculo.ROCA),  # x=100
        Obstaculo(50, 2, TipoObstaculo.CONO),  # x=50 (izquierda)
        Obstaculo(150, 0, TipoObstaculo.HUECO),  # x=150 (derecha)
        Obstaculo(25, 1, TipoObstaculo.ACEITE),  # x=25 (izquierda-izquierda)
        Obstaculo(75, 0, TipoObstaculo.BARRERA),  # x=75 (izquierda-derecha)
        Obstaculo(125, 2, TipoObstaculo.ROCA),  # x=125 (derecha-izquierda)
        Obstaculo(175, 1, TipoObstaculo.CONO),  # x=175 (derecha-derecha)
    ]

    for obstaculo in obstaculos:
        arbol.insertar(obstaculo)

    # Probar recorrido en anchura (BFS)
    recorrido_anchura = arbol.recorrido_en_anchura()
    assert len(recorrido_anchura) == 7, "Recorrido en anchura debe tener 7 elementos"

    # En BFS, el primer elemento debe ser la ra√≠z (100,1)
    assert recorrido_anchura[0].x == 100 and recorrido_anchura[0].y == 1, (
        "Primer elemento debe ser la ra√≠z"
    )

    # Probar recorrido en profundidad (in-order)
    recorrido_profundidad = arbol.recorrido_en_profundidad()
    assert len(recorrido_profundidad) == 7, (
        "Recorrido en profundidad debe tener 7 elementos"
    )

    # En in-order, los elementos deben estar ordenados por coordenadas
    for i in range(len(recorrido_profundidad) - 1):
        obs1 = recorrido_profundidad[i]
        obs2 = recorrido_profundidad[i + 1]
        assert (obs1.x < obs2.x) or (obs1.x == obs2.x and obs1.y < obs2.y), (
            f"Recorrido in-order debe estar ordenado: {obs1} antes de {obs2}"
        )

    # Verificar que ambos recorridos contienen los mismos elementos
    elementos_anchura = set((obs.x, obs.y) for obs in recorrido_anchura)
    elementos_profundidad = set((obs.x, obs.y) for obs in recorrido_profundidad)
    assert elementos_anchura == elementos_profundidad, (
        "Ambos recorridos deben contener los mismos elementos"
    )

    print("‚úÖ Recorridos gr√°ficos del √°rbol: PAS√ì")


def test_administracion_arbol_antes_juego():
    """
    Prueba: Administraci√≥n del √°rbol antes de iniciar el juego (1.0 puntos)
    - Inserci√≥n manual de obst√°culos
    - Eliminaci√≥n de obst√°culos
    - No permitir coordenadas repetidas
    - Comportamiento natural del AVL
    """
    print("üß™ Probando administraci√≥n del √°rbol antes del juego...")

    gestor = GestorJuego()

    # Probar inserci√≥n manual de obst√°culos
    assert gestor.agregar_obstaculo(100, 1, TipoObstaculo.ROCA) == True, (
        "Debe insertar obst√°culo"
    )
    assert gestor.agregar_obstaculo(200, 2, TipoObstaculo.CONO) == True, (
        "Debe insertar segundo obst√°culo"
    )
    assert gestor.agregar_obstaculo(150, 0, TipoObstaculo.HUECO) == True, (
        "Debe insertar tercer obst√°culo"
    )

    assert gestor.arbol_obstaculos.obtener_total_obstaculos() == 3, (
        "Debe tener 3 obst√°culos"
    )

    # Probar que no se permiten coordenadas repetidas
    assert gestor.agregar_obstaculo(100, 1, TipoObstaculo.ACEITE) == False, (
        "No debe permitir coordenadas repetidas"
    )
    assert gestor.arbol_obstaculos.obtener_total_obstaculos() == 3, (
        "Debe seguir teniendo 3 obst√°culos"
    )

    # Probar eliminaci√≥n de obst√°culos
    assert gestor.eliminar_obstaculo(200, 2) == True, (
        "Debe eliminar obst√°culo existente"
    )
    assert gestor.arbol_obstaculos.obtener_total_obstaculos() == 2, (
        "Debe tener 2 obst√°culos despu√©s de eliminar"
    )

    # Probar eliminaci√≥n de obst√°culo inexistente
    assert gestor.eliminar_obstaculo(300, 3) == False, (
        "No debe eliminar obst√°culo inexistente"
    )
    assert gestor.arbol_obstaculos.obtener_total_obstaculos() == 2, (
        "Debe seguir teniendo 2 obst√°culos"
    )

    # Probar comportamiento natural del AVL (balanceamiento)
    # Insertar muchos obst√°culos para forzar rotaciones
    for i in range(10):
        gestor.agregar_obstaculo(50 + i * 10, i % 3, TipoObstaculo.ROCA)

    # Verificar que el √°rbol mantiene balance (altura logar√≠tmica)
    total_obstaculos = gestor.arbol_obstaculos.obtener_total_obstaculos()
    assert total_obstaculos == 12, f"Debe tener 12 obst√°culos, tiene {total_obstaculos}"

    # Verificar que las operaciones siguen funcionando despu√©s del balanceamiento
    obstaculos_rango = gestor.arbol_obstaculos.buscar_en_rango(100, 150, 0, 2)
    assert len(obstaculos_rango) >= 1, (
        "Debe encontrar obst√°culos en el rango despu√©s del balanceamiento"
    )

    print("‚úÖ Administraci√≥n del √°rbol antes del juego: PAS√ì")


def test_juego_carrito_usando_arbol_avl():
    """
    Prueba: Juego del carrito usando el √°rbol AVL (2.0 puntos)
    - Movimiento autom√°tico del carrito
    - Control manual en eje Y
    - Sistema de salto
    - Consulta eficiente de obst√°culos en rango visible
    - Detecci√≥n de colisiones
    - Sistema de energ√≠a
    - Condiciones de fin de juego
    """
    print("üß™ Probando juego del carrito usando √°rbol AVL...")

    gestor = GestorJuego()
    gestor.inicializar_juego()

    # Agregar obst√°culos estrat√©gicamente
    obstaculos_juego = [
        (100, 1, TipoObstaculo.ROCA),  # Obst√°culo en carril medio
        (150, 0, TipoObstaculo.CONO),  # Obst√°culo en carril abajo
        (200, 2, TipoObstaculo.HUECO),  # Obst√°culo en carril arriba
        (250, 1, TipoObstaculo.ACEITE),  # Obst√°culo en carril medio
        (300, 0, TipoObstaculo.BARRERA),  # Obst√°culo en carril abajo
    ]

    for x, y, tipo in obstaculos_juego:
        gestor.agregar_obstaculo(x, y, tipo)

    carrito = gestor.carrito
    assert carrito is not None, "Debe tener un carrito inicializado"

    # Probar movimiento autom√°tico del carrito
    posicion_inicial_x = carrito.x
    carrito.mover_automaticamente()
    assert carrito.x > posicion_inicial_x, (
        "El carrito debe moverse autom√°ticamente en X"
    )

    # Probar control manual en eje Y
    posicion_inicial_y = carrito.y
    carrito.mover_arriba()
    assert carrito.y > posicion_inicial_y, "El carrito debe moverse hacia arriba"

    carrito.mover_abajo()
    assert carrito.y == posicion_inicial_y, (
        "El carrito debe volver a la posici√≥n original"
    )

    # Probar sistema de salto
    carrito.saltar()
    assert carrito.estado == EstadoCarrito.SALTANDO, "El carrito debe estar saltando"
    assert carrito.esta_saltando() == True, "Debe detectar que est√° saltando"

    # Simular finalizaci√≥n del salto
    for _ in range(25):  # M√°s que la duraci√≥n del salto
        carrito.actualizar_salto()
    assert carrito.estado == EstadoCarrito.NORMAL, (
        "El carrito debe volver al estado normal"
    )

    # Probar consulta eficiente de obst√°culos en rango visible
    carrito.x = 90  # Posicionar cerca de obst√°culos
    gestor.actualizar_obstaculos_visibles()

    # Debe encontrar obst√°culos en el rango de visi√≥n
    assert len(gestor.obstaculos_visibles) > 0, (
        "Debe encontrar obst√°culos en el rango visible"
    )

    # Probar detecci√≥n de colisiones
    carrito.x = 100
    carrito.y = 1
    colisiones = gestor.verificar_colisiones()
    assert len(colisiones) > 0, "Debe detectar colisiones"

    # Probar sistema de energ√≠a
    energia_inicial = carrito.energia_actual
    if colisiones:
        gestor.procesar_colision(colisiones[0])
        assert carrito.energia_actual < energia_inicial, (
            "El carrito debe perder energ√≠a por colisi√≥n"
        )

    # Probar condiciones de fin de juego
    # Condici√≥n 1: Sin energ√≠a
    carrito.energia_actual = 0
    assert gestor.verificar_condiciones_fin_juego() == True, (
        "Debe terminar el juego sin energ√≠a"
    )

    # Condici√≥n 2: Alcanzar distancia total
    carrito.energia_actual = 100  # Restaurar energ√≠a
    carrito.x = gestor.distancia_total + 50  # Posici√≥n que supera la distancia total
    # Actualizar distancia recorrida manualmente para la prueba
    gestor.distancia_recorrida = gestor.distancia_total + 10
    assert gestor.verificar_condiciones_fin_juego() == True, (
        "Debe terminar el juego al alcanzar la meta"
    )

    print("‚úÖ Juego del carrito usando √°rbol AVL: PAS√ì")


def test_criterios_ordenamiento_avl():
    """
    Prueba espec√≠fica de los criterios de ordenamiento del AVL seg√∫n definicion.md:
    - Comparar primero el valor de x
    - En caso de empate en x, comparar el valor de y
    - No se permiten coordenadas repetidas
    """
    print("üß™ Probando criterios de ordenamiento del AVL...")

    arbol = ArbolAVL()

    # Probar ordenamiento por X
    obstaculo1 = Obstaculo(100, 1, TipoObstaculo.ROCA)
    obstaculo2 = Obstaculo(50, 2, TipoObstaculo.CONO)

    nodo1 = NodoAVL(obstaculo1)
    nodo2 = NodoAVL(obstaculo2)

    assert nodo1.es_mayor_que(obstaculo2) == True, (
        "100,1 debe ser mayor que 50,2 (por X)"
    )
    assert nodo2.es_mayor_que(obstaculo1) == False, "50,2 no debe ser mayor que 100,1"

    # Probar ordenamiento por Y cuando X es igual
    obstaculo3 = Obstaculo(100, 0, TipoObstaculo.HUECO)
    assert nodo1.es_mayor_que(obstaculo3) == True, (
        "100,1 debe ser mayor que 100,0 (por Y)"
    )
    assert nodo1.es_igual_a(obstaculo3) == False, "100,1 no debe ser igual a 100,0"

    # Probar que no se permiten coordenadas repetidas
    arbol.insertar(obstaculo1)
    assert arbol.insertar(obstaculo1) == False, (
        "No debe permitir insertar coordenadas repetidas"
    )
    assert arbol.obtener_total_obstaculos() == 1, "Debe tener solo 1 obst√°culo"

    # Probar inserci√≥n de obst√°culo con mismas coordenadas pero diferente tipo
    obstaculo_repetido = Obstaculo(100, 1, TipoObstaculo.ACEITE)
    assert arbol.insertar(obstaculo_repetido) == False, (
        "No debe permitir coordenadas repetidas aunque sea diferente tipo"
    )

    print("‚úÖ Criterios de ordenamiento del AVL: PAS√ì")


def test_consulta_rango_eficiente():
    """
    Prueba espec√≠fica de la consulta eficiente de obst√°culos en rango
    seg√∫n definicion.md: "consultar r√°pidamente los obst√°culos dentro de un rango"
    """
    print("üß™ Probando consulta eficiente de obst√°culos en rango...")

    arbol = ArbolAVL()

    # Insertar obst√°culos en diferentes posiciones
    obstaculos = [
        Obstaculo(50, 0, TipoObstaculo.ROCA),
        Obstaculo(100, 1, TipoObstaculo.CONO),
        Obstaculo(150, 2, TipoObstaculo.HUECO),
        Obstaculo(200, 0, TipoObstaculo.ACEITE),
        Obstaculo(250, 1, TipoObstaculo.BARRERA),
        Obstaculo(300, 2, TipoObstaculo.ROCA),
        Obstaculo(350, 0, TipoObstaculo.CONO),
    ]

    for obstaculo in obstaculos:
        arbol.insertar(obstaculo)

    # Probar consulta de rango espec√≠fico
    obstaculos_rango = arbol.buscar_en_rango(90, 160, 0, 2)

    # Debe encontrar obst√°culos en el rango
    coordenadas_encontradas = [(obs.x, obs.y) for obs in obstaculos_rango]
    assert (100, 1) in coordenadas_encontradas, "Debe encontrar obst√°culo en (100,1)"
    assert (150, 2) in coordenadas_encontradas, "Debe encontrar obst√°culo en (150,2)"

    # No debe encontrar obst√°culos fuera del rango
    assert (50, 0) not in coordenadas_encontradas, (
        "No debe encontrar obst√°culo en (50,0)"
    )
    assert (200, 0) not in coordenadas_encontradas, (
        "No debe encontrar obst√°culo en (200,0)"
    )

    # Probar consulta de rango vac√≠o
    obstaculos_vacio = arbol.buscar_en_rango(400, 500, 0, 2)
    assert len(obstaculos_vacio) == 0, "No debe encontrar obst√°culos en rango vac√≠o"

    # Probar consulta de rango que incluye todos los obst√°culos
    obstaculos_todos = arbol.buscar_en_rango(0, 400, 0, 2)
    assert len(obstaculos_todos) == 7, "Debe encontrar todos los obst√°culos"

    print("‚úÖ Consulta eficiente de obst√°culos en rango: PAS√ì")


def test_configuracion_json():
    """
    Prueba espec√≠fica de la carga de configuraci√≥n desde JSON
    seg√∫n definicion.md
    """
    print("üß™ Probando configuraci√≥n desde JSON...")

    # Crear configuraci√≥n de prueba seg√∫n el ejemplo de definicion.md
    config_json = {
        "configuracion": {
            "distancia_total": 2000,
            "velocidad_carrito": 10,
            "refresco_ms": 300,
            "altura_salto": 50,
            "color_carrito_inicial": "verde",
        },
        "obstaculos": [
            {"x": 150, "y": 0, "tipo": "roca"},
            {"x": 320, "y": 1, "tipo": "cono"},
            {"x": 500, "y": 2, "tipo": "hueco"},
            {"x": 1200, "y": 1, "tipo": "aceite"},
        ],
    }

    # Crear archivo temporal
    with tempfile.NamedTemporaryFile(mode="w", suffix=".json", delete=False) as f:
        json.dump(config_json, f, indent=2)
        temp_file = f.name

    try:
        gestor = GestorJuego(temp_file)
        resultado = gestor.cargar_configuracion()

        assert resultado == True, "Debe cargar configuraci√≥n exitosamente"

        # Verificar configuraci√≥n del juego
        assert gestor.distancia_total == 2000, "Debe cargar distancia_total"
        assert gestor.velocidad_carrito == 10, "Debe cargar velocidad_carrito"
        assert gestor.refresco_ms == 300, "Debe cargar refresco_ms"
        assert gestor.altura_salto == 50, "Debe cargar altura_salto"
        assert gestor.color_carrito_inicial == "verde", (
            "Debe cargar color_carrito_inicial"
        )

        # Verificar obst√°culos
        assert gestor.arbol_obstaculos.obtener_total_obstaculos() == 4, (
            "Debe cargar 4 obst√°culos"
        )

        # Verificar que los obst√°culos est√°n en el √°rbol
        obstaculos = gestor.arbol_obstaculos.recorrido_en_profundidad()
        coordenadas = [(obs.x, obs.y) for obs in obstaculos]

        assert (150, 0) in coordenadas, "Debe tener obst√°culo en (150,0)"
        assert (320, 1) in coordenadas, "Debe tener obst√°culo en (320,1)"
        assert (500, 2) in coordenadas, "Debe tener obst√°culo en (500,2)"
        assert (1200, 1) in coordenadas, "Debe tener obst√°culo en (1200,1)"

        print("‚úÖ Configuraci√≥n desde JSON: PAS√ì")

    finally:
        os.unlink(temp_file)


def test_escenario_carrito_llega_meta():
    """
    Prueba espec√≠fica: Carrito llega a la meta (escenario de √©xito)
    """
    print("üß™ Probando escenario: carrito llega a la meta...")

    gestor = GestorJuego()
    gestor.inicializar_juego()

    # Configurar distancia corta para prueba
    gestor.distancia_total = 500

    # Agregar algunos obst√°culos
    gestor.agregar_obstaculo(100, 1, TipoObstaculo.ROCA)
    gestor.agregar_obstaculo(200, 0, TipoObstaculo.CONO)
    gestor.agregar_obstaculo(300, 2, TipoObstaculo.HUECO)

    carrito = gestor.carrito

    # Simular avance del carrito hasta la meta
    for paso in range(100):  # Suficientes pasos para llegar a la meta
        # Mover carrito autom√°ticamente
        carrito.mover_automaticamente()

        # Actualizar distancia recorrida
        gestor.distancia_recorrida = carrito.x - 50

        # Actualizar obst√°culos visibles
        gestor.actualizar_obstaculos_visibles()

        # Verificar colisiones
        colisiones = gestor.verificar_colisiones()
        if colisiones:
            # Esquivar obst√°culos moviendo a carriles libres
            if carrito.y == 1:  # Si est√° en carril medio
                carrito.mover_arriba()  # Mover arriba
            elif carrito.y == 2:  # Si est√° arriba
                carrito.mover_abajo()  # Mover abajo

        # Verificar si lleg√≥ a la meta
        if gestor.verificar_condiciones_fin_juego():
            break

    # Verificar que lleg√≥ a la meta
    assert gestor.distancia_recorrida >= gestor.distancia_total, (
        "Debe haber llegado a la meta"
    )
    assert carrito.esta_vivo() == True, "Carrito debe seguir vivo al llegar a la meta"

    print("‚úÖ Escenario: carrito llega a la meta: PAS√ì")


def test_escenario_carrito_muere():
    """
    Prueba espec√≠fica: Carrito muere por colisiones (escenario de fallo)
    """
    print("üß™ Probando escenario: carrito muere por colisiones...")

    gestor = GestorJuego()
    gestor.inicializar_juego()

    # Agregar muchos obst√°culos para causar da√±o
    for i in range(10):
        gestor.agregar_obstaculo(
            100 + i * 20, 1, TipoObstaculo.BARRERA
        )  # Obst√°culos de alto da√±o

    carrito = gestor.carrito

    # Simular juego hasta que muera
    for paso in range(50):
        # Mover carrito autom√°ticamente
        carrito.mover_automaticamente()

        # Actualizar obst√°culos visibles
        gestor.actualizar_obstaculos_visibles()

        # Verificar colisiones
        colisiones = gestor.verificar_colisiones()
        if colisiones:
            # Procesar todas las colisiones
            for colision in colisiones:
                gestor.procesar_colision(colision)

        # Verificar si muri√≥
        if not carrito.esta_vivo():
            break

    # Verificar que muri√≥
    assert carrito.esta_vivo() == False, "Carrito debe haber muerto"
    assert carrito.energia_actual == 0, "Carrito debe tener 0 de energ√≠a"

    print("‚úÖ Escenario: carrito muere por colisiones: PAS√ì")


def main():
    """Ejecuta todas las pruebas de requisitos del proyecto"""
    print("üöÄ Iniciando pruebas de requisitos del proyecto...\n")
    print("=" * 60)

    try:
        # Pruebas seg√∫n puntos de calificaci√≥n
        test_carga_y_representacion_arbol()
        print()

        test_recorridos_graficos_arbol()
        print()

        test_administracion_arbol_antes_juego()
        print()

        test_juego_carrito_usando_arbol_avl()
        print()

        # Pruebas espec√≠ficas de requisitos t√©cnicos
        test_criterios_ordenamiento_avl()
        print()

        test_consulta_rango_eficiente()
        print()

        test_configuracion_json()
        print()

        # Pruebas de escenarios espec√≠ficos
        test_escenario_carrito_llega_meta()
        print()

        test_escenario_carrito_muere()
        print()

        print("=" * 60)
        print("üéâ ¬°TODAS LAS PRUEBAS DE REQUISITOS PASARON!")
        print("‚úÖ El proyecto cumple con todos los requisitos de definicion.md")
        print("üìä Puntos de calificaci√≥n validados:")
        print("   ‚Ä¢ Carga y representaci√≥n del √°rbol: ‚úÖ (0.5)")
        print("   ‚Ä¢ Recorridos gr√°ficos del √°rbol: ‚úÖ (1.0)")
        print("   ‚Ä¢ Administraci√≥n del √°rbol antes del juego: ‚úÖ (1.0)")
        print("   ‚Ä¢ Juego del carrito usando √°rbol AVL: ‚úÖ (2.0)")
        print("   ‚Ä¢ Criterios t√©cnicos espec√≠ficos: ‚úÖ")
        print("   ‚Ä¢ Escenarios de juego: ‚úÖ")

        return True

    except AssertionError as e:
        print(f"‚ùå Error en las pruebas: {e}")
        return False
    except Exception as e:
        print(f"üí• Error inesperado: {e}")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
