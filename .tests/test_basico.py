"""
Pruebas b√°sicas - Validaci√≥n de funcionalidad fundamental
Desde lo m√°s simple hasta lo m√°s complejo seg√∫n definicion.md
"""

import sys
import os

# Agregar el directorio ra√≠z del proyecto al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), ".."))

from logic.obstaculo import Obstaculo, TipoObstaculo
from logic.nodo_avl import NodoAVL
from logic.arbol_avl import ArbolAVL
from logic.carrito import Carrito, EstadoCarrito
from logic.gestor_juego import GestorJuego, EstadoJuego


def test_creacion_obstaculos():
    """Prueba b√°sica: Crear obst√°culos de diferentes tipos"""
    print("üß™ Probando creaci√≥n de obst√°culos...")

    # Crear obst√°culos de todos los tipos
    tipos_obstaculos = [
        (TipoObstaculo.ROCA, 20),
        (TipoObstaculo.CONO, 10),
        (TipoObstaculo.HUECO, 15),
        (TipoObstaculo.ACEITE, 5),
        (TipoObstaculo.BARRERA, 25),
    ]

    for tipo, da√±o_esperado in tipos_obstaculos:
        obstaculo = Obstaculo(100, 1, tipo)
        assert obstaculo.tipo == tipo, f"Tipo debe ser {tipo}"
        assert obstaculo.obtener_da√±o() == da√±o_esperado, (
            f"Da√±o debe ser {da√±o_esperado} para {tipo}"
        )
        assert obstaculo.x == 100, "Coordenada X debe ser 100"
        assert obstaculo.y == 1, "Coordenada Y debe ser 1"

    print("‚úÖ Creaci√≥n de obst√°culos: PAS√ì")


def test_creacion_carrito():
    """Prueba b√°sica: Crear carrito con estado inicial"""
    print("üß™ Probando creaci√≥n de carrito...")

    carrito = Carrito(x_inicial=50, y_inicial=1, energia_maxima=100)

    # Verificar estado inicial
    assert carrito.x == 50, "Posici√≥n X inicial debe ser 50"
    assert carrito.y == 1, "Posici√≥n Y inicial debe ser 1"
    assert carrito.energia_actual == 100, "Energ√≠a inicial debe ser 100"
    assert carrito.energia_maxima == 100, "Energ√≠a m√°xima debe ser 100"
    assert carrito.estado == EstadoCarrito.NORMAL, "Estado inicial debe ser NORMAL"
    assert carrito.esta_vivo() == True, "Carrito debe estar vivo inicialmente"
    assert carrito.obtener_porcentaje_energia() == 1.0, (
        "Porcentaje de energ√≠a debe ser 100%"
    )

    print("‚úÖ Creaci√≥n de carrito: PAS√ì")


def test_movimiento_carrito():
    """Prueba b√°sica: Movimiento del carrito"""
    print("üß™ Probando movimiento del carrito...")

    carrito = Carrito(x_inicial=50, y_inicial=1)

    # Movimiento autom√°tico en X
    posicion_inicial_x = carrito.x
    carrito.mover_automaticamente()
    assert carrito.x == posicion_inicial_x + 5, "Debe avanzar 5 metros en X"

    # Movimiento manual en Y
    carrito.mover_arriba()
    assert carrito.y == 2, "Debe moverse al carril superior"

    carrito.mover_abajo()
    assert carrito.y == 1, "Debe volver al carril medio"

    carrito.mover_abajo()
    assert carrito.y == 0, "Debe moverse al carril inferior"

    # No debe moverse fuera de los l√≠mites
    carrito.mover_abajo()
    assert carrito.y == 0, "No debe moverse fuera del l√≠mite inferior"

    carrito.mover_arriba()
    carrito.mover_arriba()
    carrito.mover_arriba()
    assert carrito.y == 2, "No debe moverse fuera del l√≠mite superior"

    print("‚úÖ Movimiento del carrito: PAS√ì")


def test_salto_carrito():
    """Prueba b√°sica: Sistema de salto del carrito"""
    print("üß™ Probando sistema de salto del carrito...")

    carrito = Carrito()

    # Iniciar salto
    carrito.saltar()
    assert carrito.estado == EstadoCarrito.SALTANDO, "Debe estar en estado SALTANDO"
    assert carrito.esta_saltando() == True, "Debe detectar que est√° saltando"
    assert carrito.color_actual == carrito.color_saltando, "Debe cambiar de color"

    # Simular frames del salto
    for frame in range(25):  # M√°s que la duraci√≥n del salto
        carrito.actualizar_salto()
        if frame < 10:  # Durante la subida
            assert carrito.velocidad_y > 0, (
                f"Velocidad Y debe ser positiva durante subida (frame {frame})"
            )
        elif frame > 15:  # Durante la bajada
            assert carrito.velocidad_y <= 0, (
                f"Velocidad Y debe ser negativa durante bajada (frame {frame})"
            )

    # Verificar que termin√≥ el salto
    assert carrito.estado == EstadoCarrito.NORMAL, "Debe volver al estado NORMAL"
    assert carrito.esta_saltando() == False, "No debe estar saltando"
    assert carrito.color_actual == carrito.color_normal, "Debe volver al color normal"
    assert carrito.velocidad_y == 0, "Velocidad Y debe ser 0 al finalizar"

    print("‚úÖ Sistema de salto del carrito: PAS√ì")


def test_da√±o_carrito():
    """Prueba b√°sica: Sistema de da√±o del carrito"""
    print("üß™ Probando sistema de da√±o del carrito...")

    carrito = Carrito(energia_maxima=100)

    # Aplicar da√±o
    carrito.recibir_da√±o(30)
    assert carrito.energia_actual == 70, (
        "Debe tener 70 de energ√≠a despu√©s de 30 de da√±o"
    )
    assert carrito.esta_vivo() == True, "Debe seguir vivo con 70 de energ√≠a"
    assert carrito.obtener_porcentaje_energia() == 0.7, "Debe tener 70% de energ√≠a"

    # Aplicar m√°s da√±o
    carrito.recibir_da√±o(50)
    assert carrito.energia_actual == 20, "Debe tener 20 de energ√≠a"
    assert carrito.esta_vivo() == True, "Debe seguir vivo con 20 de energ√≠a"

    # Aplicar da√±o fatal
    carrito.recibir_da√±o(25)
    assert carrito.energia_actual == 0, "Debe tener 0 de energ√≠a"
    assert carrito.esta_vivo() == False, "No debe estar vivo con 0 de energ√≠a"
    assert carrito.obtener_porcentaje_energia() == 0.0, "Debe tener 0% de energ√≠a"

    print("‚úÖ Sistema de da√±o del carrito: PAS√ì")


def test_deteccion_colisiones():
    """Prueba b√°sica: Detecci√≥n de colisiones"""
    print("üß™ Probando detecci√≥n de colisiones...")

    carrito = Carrito(x_inicial=100, y_inicial=1)
    obstaculo = Obstaculo(100, 1, TipoObstaculo.ROCA)

    # Colisi√≥n directa
    assert carrito.colisiona_con(obstaculo) == True, "Debe detectar colisi√≥n directa"

    # Sin colisi√≥n - diferente X
    obstaculo.x = 150
    assert carrito.colisiona_con(obstaculo) == False, (
        "No debe detectar colisi√≥n con diferente X"
    )

    # Sin colisi√≥n - diferente Y (m√°s separado)
    obstaculo.x = 100
    obstaculo.y = 50  # Muy separado en Y
    assert carrito.colisiona_con(obstaculo) == False, (
        "No debe detectar colisi√≥n con diferente Y"
    )

    # Colisi√≥n parcial
    obstaculo.x = 120  # Se superpone parcialmente
    obstaculo.y = 1
    assert carrito.colisiona_con(obstaculo) == True, "Debe detectar colisi√≥n parcial"

    print("‚úÖ Detecci√≥n de colisiones: PAS√ì")


def test_creacion_arbol_vacio():
    """Prueba b√°sica: Crear √°rbol AVL vac√≠o"""
    print("üß™ Probando creaci√≥n de √°rbol AVL vac√≠o...")

    arbol = ArbolAVL()

    assert arbol.esta_vacio() == True, "√Årbol debe estar vac√≠o inicialmente"
    assert arbol.obtener_total_obstaculos() == 0, "Debe tener 0 obst√°culos"
    assert arbol.raiz is None, "Ra√≠z debe ser None"

    # Recorridos en √°rbol vac√≠o
    assert arbol.recorrido_en_anchura() == [], (
        "Recorrido en anchura debe ser lista vac√≠a"
    )
    assert arbol.recorrido_en_profundidad() == [], (
        "Recorrido en profundidad debe ser lista vac√≠a"
    )
    assert arbol.buscar_en_rango(0, 100, 0, 2) == [], (
        "B√∫squeda en rango debe ser lista vac√≠a"
    )

    print("‚úÖ Creaci√≥n de √°rbol AVL vac√≠o: PAS√ì")


def test_insercion_simple():
    """Prueba b√°sica: Inserci√≥n simple en √°rbol AVL"""
    print("üß™ Probando inserci√≥n simple en √°rbol AVL...")

    arbol = ArbolAVL()
    obstaculo = Obstaculo(100, 1, TipoObstaculo.ROCA)

    # Insertar primer obst√°culo
    resultado = arbol.insertar(obstaculo)
    assert resultado == True, "Debe insertar obst√°culo exitosamente"
    assert arbol.esta_vacio() == False, "√Årbol no debe estar vac√≠o"
    assert arbol.obtener_total_obstaculos() == 1, "Debe tener 1 obst√°culo"
    assert arbol.raiz is not None, "Ra√≠z no debe ser None"
    assert arbol.raiz.obstaculo == obstaculo, (
        "Ra√≠z debe contener el obst√°culo insertado"
    )

    # Intentar insertar duplicado
    obstaculo_duplicado = Obstaculo(100, 1, TipoObstaculo.CONO)
    resultado = arbol.insertar(obstaculo_duplicado)
    assert resultado == False, "No debe insertar obst√°culo duplicado"
    assert arbol.obtener_total_obstaculos() == 1, "Debe seguir teniendo 1 obst√°culo"

    print("‚úÖ Inserci√≥n simple en √°rbol AVL: PAS√ì")


def test_busqueda_simple():
    """Prueba b√°sica: B√∫squeda simple en √°rbol AVL"""
    print("üß™ Probando b√∫squeda simple en √°rbol AVL...")

    arbol = ArbolAVL()

    # Insertar varios obst√°culos
    obstaculos = [
        Obstaculo(100, 1, TipoObstaculo.ROCA),
        Obstaculo(50, 2, TipoObstaculo.CONO),
        Obstaculo(150, 0, TipoObstaculo.HUECO),
    ]

    for obstaculo in obstaculos:
        arbol.insertar(obstaculo)

    # B√∫squeda en rango que incluye todos
    resultado = arbol.buscar_en_rango(0, 200, 0, 2)
    assert len(resultado) == 3, "Debe encontrar 3 obst√°culos en rango amplio"

    # B√∫squeda en rango espec√≠fico
    resultado = arbol.buscar_en_rango(90, 110, 0, 2)
    assert len(resultado) == 1, "Debe encontrar 1 obst√°culo en rango espec√≠fico"
    assert resultado[0].x == 100, "Debe encontrar el obst√°culo en (100,1)"

    # B√∫squeda en rango vac√≠o
    resultado = arbol.buscar_en_rango(200, 300, 0, 2)
    assert len(resultado) == 0, "No debe encontrar obst√°culos en rango vac√≠o"

    print("‚úÖ B√∫squeda simple en √°rbol AVL: PAS√ì")


def main():
    """Ejecuta todas las pruebas b√°sicas"""
    print("üöÄ Iniciando pruebas b√°sicas...\n")
    print("=" * 50)

    try:
        test_creacion_obstaculos()
        print()

        test_creacion_carrito()
        print()

        test_movimiento_carrito()
        print()

        test_salto_carrito()
        print()

        test_da√±o_carrito()
        print()

        test_deteccion_colisiones()
        print()

        test_creacion_arbol_vacio()
        print()

        test_insercion_simple()
        print()

        test_busqueda_simple()
        print()

        print("=" * 50)
        print("üéâ ¬°TODAS LAS PRUEBAS B√ÅSICAS PASARON!")
        print("‚úÖ Funcionalidad fundamental validada")

        return True

    except AssertionError as e:
        print(f"‚ùå Error en las pruebas: {e}")
        return False
    except Exception as e:
        print(f"üí• Error inesperado: {e}")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
