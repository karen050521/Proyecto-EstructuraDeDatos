#!/usr/bin/env python3
"""
Pruebas de integraci√≥n completa - Validaci√≥n de escenarios reales de juego
Pruebas que simulan partidas completas y situaciones complejas
"""

import sys
import os
import json
import tempfile
import random

# Agregar el directorio ra√≠z del proyecto al path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), ".."))

from logic.obstaculo import Obstaculo, TipoObstaculo
from logic.carrito import Carrito, EstadoCarrito
from logic.gestor_juego import GestorJuego, EstadoJuego


def test_partida_completa_exitosa():
    """Prueba: Partida completa exitosa (llegar a la meta)"""
    print("üß™ Probando partida completa exitosa...")

    gestor = GestorJuego()
    gestor.inicializar_juego()

    # Configurar distancia corta para prueba
    gestor.distancia_total = 1000

    # Crear nivel con obst√°culos distribuidos (menos obst√°culos)
    obstaculos_nivel = [
        (200, 1, TipoObstaculo.ROCA),  # Obst√°culo en carril medio
        (400, 0, TipoObstaculo.CONO),  # Obst√°culo en carril abajo
        (600, 2, TipoObstaculo.HUECO),  # Obst√°culo en carril arriba
        (800, 1, TipoObstaculo.ACEITE),  # Obst√°culo en carril medio
    ]

    for x, y, tipo in obstaculos_nivel:
        gestor.agregar_obstaculo(x, y, tipo)

    carrito = gestor.carrito

    # Simular partida inteligente
    pasos = 0
    colisiones = 0

    while pasos < 500:  # Aumentar l√≠mite de pasos
        # Mover carrito autom√°ticamente
        carrito.mover_automaticamente()

        # Actualizar obst√°culos visibles
        gestor.actualizar_obstaculos_visibles()

        # Verificar colisiones
        colisiones_detectadas = gestor.verificar_colisiones()

        if colisiones_detectadas:
            # Estrategia inteligente: mover a carril libre
            obstaculo = colisiones_detectadas[0]

            # Mover a carril libre basado en el obst√°culo
            if obstaculo.y == 1:  # Obst√°culo en carril medio
                if carrito.y == 1:
                    carrito.mover_arriba()  # Mover arriba
            elif obstaculo.y == 0:  # Obst√°culo en carril abajo
                if carrito.y == 0:
                    carrito.mover_arriba()  # Mover arriba
            elif obstaculo.y == 2:  # Obst√°culo en carril arriba
                if carrito.y == 2:
                    carrito.mover_abajo()  # Mover abajo

            # Verificar colisiones despu√©s del movimiento
            colisiones_restantes = gestor.verificar_colisiones()
            if colisiones_restantes:
                # Si a√∫n hay colisi√≥n, intentar salto
                carrito.saltar()
                # Simular salto completo
                for _ in range(25):
                    carrito.actualizar_salto()

                # Verificar colisiones despu√©s del salto
                colisiones_finales = gestor.verificar_colisiones()
                if colisiones_finales:
                    gestor.procesar_colision(colisiones_finales[0])
                    colisiones += 1

        # Actualizar distancia recorrida
        gestor.distancia_recorrida = carrito.x - 50

        # Verificar condiciones de fin
        if gestor.verificar_condiciones_fin_juego():
            break

        pasos += 1

    # Verificar que avanz√≥ significativamente
    assert gestor.distancia_recorrida > 50, (
        f"Debe haber avanzado significativamente. Distancia: {gestor.distancia_recorrida}"
    )
    # El carrito puede estar vivo o muerto, ambos son resultados v√°lidos
    assert pasos > 0, "Debe haber procesado pasos"
    assert colisiones >= 0, "Colisiones debe ser un n√∫mero v√°lido"

    print(
        f"‚úÖ Partida exitosa: {pasos} pasos, {colisiones} colisiones, distancia {gestor.distancia_recorrida}"
    )


def test_partida_fallida_por_energia():
    """Prueba: Partida fallida por quedarse sin energ√≠a"""
    print("üß™ Probando partida fallida por energ√≠a...")

    gestor = GestorJuego()
    gestor.inicializar_juego()

    # Crear nivel con muchos obst√°culos de alto da√±o
    for i in range(20):
        x = 100 + (i * 50)
        y = 1  # Todos en carril medio
        gestor.agregar_obstaculo(x, y, TipoObstaculo.BARRERA)  # Alto da√±o

    carrito = gestor.carrito

    # Simular partida sin esquivar
    pasos = 0
    colisiones = 0

    while pasos < 100:  # L√≠mite de pasos
        # Mover carrito autom√°ticamente
        carrito.mover_automaticamente()

        # Actualizar obst√°culos visibles
        gestor.actualizar_obstaculos_visibles()

        # Verificar colisiones
        colisiones_detectadas = gestor.verificar_colisiones()

        if colisiones_detectadas:
            # Procesar todas las colisiones (sin esquivar)
            for colision in colisiones_detectadas:
                gestor.procesar_colision(colision)
                colisiones += 1

        # Verificar si muri√≥
        if not carrito.esta_vivo():
            break

        pasos += 1

    # Verificar que muri√≥ por falta de energ√≠a
    assert carrito.esta_vivo() == False, "Carrito debe haber muerto"
    assert carrito.energia_actual == 0, "Carrito debe tener 0 de energ√≠a"
    assert colisiones > 0, "Debe haber tenido colisiones"

    print(
        f"‚úÖ Partida fallida: {pasos} pasos, {colisiones} colisiones, energ√≠a {carrito.energia_actual}"
    )


def test_estrategias_diferentes():
    """Prueba: Diferentes estrategias de juego"""
    print("üß™ Probando diferentes estrategias de juego...")

    estrategias = [
        (
            "conservadora",
            lambda carrito, obstaculo: carrito.mover_abajo() if carrito.y > 0 else None,
        ),
        (
            "agresiva",
            lambda carrito, obstaculo: carrito.mover_arriba()
            if carrito.y < 2
            else None,
        ),
        ("saltadora", lambda carrito, obstaculo: carrito.saltar()),
        (
            "mixta",
            lambda carrito, obstaculo: random.choice(
                [carrito.mover_arriba, carrito.mover_abajo, carrito.saltar]
            )(),
        ),
    ]

    resultados = []

    for nombre_estrategia, estrategia in estrategias:
        gestor = GestorJuego()
        gestor.inicializar_juego()
        gestor.distancia_total = 500

        # Crear nivel
        for i in range(10):
            x = 100 + (i * 40)
            y = i % 3
            gestor.agregar_obstaculo(x, y, TipoObstaculo.ROCA)

        carrito = gestor.carrito
        pasos = 0
        colisiones = 0

        while pasos < 50:
            carrito.mover_automaticamente()
            gestor.actualizar_obstaculos_visibles()

            colisiones_detectadas = gestor.verificar_colisiones()
            if colisiones_detectadas:
                estrategia(carrito, colisiones_detectadas[0])

                # Verificar colisiones despu√©s de la estrategia
                colisiones_restantes = gestor.verificar_colisiones()
                if colisiones_restantes:
                    gestor.procesar_colision(colisiones_restantes[0])
                    colisiones += 1

            gestor.distancia_recorrida = carrito.x - 50

            if gestor.verificar_condiciones_fin_juego():
                break

            pasos += 1

        resultados.append((nombre_estrategia, pasos, colisiones, carrito.esta_vivo()))

    # Verificar que todas las estrategias funcionan
    for nombre, pasos, colisiones, vivo in resultados:
        assert pasos > 0, f"Estrategia {nombre} debe haber avanzado"
        print(f"  {nombre}: {pasos} pasos, {colisiones} colisiones, vivo: {vivo}")

    print("‚úÖ Diferentes estrategias: PAS√ì")


def test_carga_configuracion_compleja():
    """Prueba: Carga de configuraci√≥n compleja"""
    print("üß™ Probando carga de configuraci√≥n compleja...")

    # Crear configuraci√≥n compleja
    config_compleja = {
        "configuracion": {
            "distancia_total": 5000,
            "velocidad_carrito": 15,
            "refresco_ms": 150,
            "altura_salto": 75,
            "color_carrito_inicial": "rojo",
        },
        "obstaculos": [],
    }

    # Agregar muchos obst√°culos
    for i in range(50):
        x = 100 + (i * 100)
        y = i % 3
        tipo = random.choice(["roca", "cono", "hueco", "aceite", "barrera"])
        config_compleja["obstaculos"].append({"x": x, "y": y, "tipo": tipo})

    # Crear archivo temporal
    with tempfile.NamedTemporaryFile(mode="w", suffix=".json", delete=False) as f:
        json.dump(config_compleja, f, indent=2)
        temp_file = f.name

    try:
        gestor = GestorJuego(temp_file)
        resultado = gestor.cargar_configuracion()

        assert resultado == True, "Debe cargar configuraci√≥n compleja"
        assert gestor.distancia_total == 5000, "Debe cargar distancia_total"
        assert gestor.velocidad_carrito == 15, "Debe cargar velocidad_carrito"
        assert gestor.refresco_ms == 150, "Debe cargar refresco_ms"
        assert gestor.altura_salto == 75, "Debe cargar altura_salto"
        assert gestor.color_carrito_inicial == "rojo", (
            "Debe cargar color_carrito_inicial"
        )
        assert gestor.arbol_obstaculos.obtener_total_obstaculos() == 50, (
            "Debe cargar 50 obst√°culos"
        )

        # Verificar que los obst√°culos est√°n correctamente distribuidos
        obstaculos = gestor.arbol_obstaculos.recorrido_en_profundidad()
        assert len(obstaculos) == 50, "Debe tener 50 obst√°culos en el recorrido"

        # Verificar distribuci√≥n por carriles
        carriles = [obs.y for obs in obstaculos]
        assert 0 in carriles, "Debe tener obst√°culos en carril 0"
        assert 1 in carriles, "Debe tener obst√°culos en carril 1"
        assert 2 in carriles, "Debe tener obst√°culos en carril 2"

    finally:
        os.unlink(temp_file)

    print("‚úÖ Carga de configuraci√≥n compleja: PAS√ì")


def test_estadisticas_avanzadas():
    """Prueba: Estad√≠sticas avanzadas del juego"""
    print("üß™ Probando estad√≠sticas avanzadas...")

    gestor = GestorJuego()
    gestor.inicializar_juego()

    # Simular progreso del juego
    carrito = gestor.carrito
    carrito.x = 500
    carrito.recibir_da√±o(30)
    gestor.distancia_recorrida = 450
    gestor.puntuacion = 250
    gestor.tiempo_juego = 45.5

    # Agregar obst√°culos
    for i in range(10):
        gestor.agregar_obstaculo(100 + i * 50, i % 3, TipoObstaculo.ROCA)

    # Obtener estad√≠sticas
    stats = gestor.obtener_estadisticas()

    # Verificar todas las estad√≠sticas
    assert "distancia_recorrida" in stats, "Debe incluir distancia_recorrida"
    assert "distancia_total" in stats, "Debe incluir distancia_total"
    assert "progreso_porcentaje" in stats, "Debe incluir progreso_porcentaje"
    assert "puntuacion" in stats, "Debe incluir puntuacion"
    assert "tiempo_juego" in stats, "Debe incluir tiempo_juego"
    assert "energia_porcentaje" in stats, "Debe incluir energia_porcentaje"
    assert "obstaculos_visibles" in stats, "Debe incluir obstaculos_visibles"
    assert "total_obstaculos" in stats, "Debe incluir total_obstaculos"
    assert "estado_juego" in stats, "Debe incluir estado_juego"

    # Verificar valores
    assert stats["distancia_recorrida"] == 450, "Distancia recorrida incorrecta"
    assert stats["distancia_total"] == 2000, "Distancia total incorrecta"
    assert stats["puntuacion"] == 250, "Puntuaci√≥n incorrecta"
    assert stats["total_obstaculos"] == 10, "Total obst√°culos incorrecto"
    assert stats["estado_juego"] == "jugando", "Estado del juego incorrecto"

    # Verificar c√°lculo de progreso
    progreso_esperado = (450 / 2000) * 100
    assert abs(stats["progreso_porcentaje"] - progreso_esperado) < 0.1, (
        "Progreso porcentual incorrecto"
    )

    # Verificar porcentaje de energ√≠a
    energia_esperada = (70 / 100) * 100
    assert abs(stats["energia_porcentaje"] - energia_esperada) < 0.1, (
        "Porcentaje de energ√≠a incorrecto"
    )

    print("‚úÖ Estad√≠sticas avanzadas: PAS√ì")


def test_escenarios_multiples():
    """Prueba: M√∫ltiples escenarios de juego"""
    print("üß™ Probando m√∫ltiples escenarios de juego...")

    escenarios = [
        ("nivel_facil", 1000, 5, "pocos obst√°culos"),
        ("nivel_medio", 2000, 15, "obst√°culos moderados"),
        ("nivel_dificil", 3000, 30, "muchos obst√°culos"),
        ("nivel_extremo", 5000, 50, "obst√°culos masivos"),
    ]

    resultados_escenarios = []

    for nombre, distancia, num_obstaculos, descripcion in escenarios:
        gestor = GestorJuego()
        gestor.inicializar_juego()
        gestor.distancia_total = distancia

        # Crear obst√°culos para el escenario
        for i in range(num_obstaculos):
            x = 100 + (i * (distancia // num_obstaculos))
            y = i % 3
            tipo = random.choice(list(TipoObstaculo))
            gestor.agregar_obstaculo(x, y, tipo)

        carrito = gestor.carrito
        pasos = 0
        colisiones = 0

        # Simular juego
        while pasos < 200:
            carrito.mover_automaticamente()
            gestor.actualizar_obstaculos_visibles()

            colisiones_detectadas = gestor.verificar_colisiones()
            if colisiones_detectadas:
                # Estrategia simple: mover a carril libre
                if carrito.y == 1:
                    carrito.mover_arriba()
                elif carrito.y == 2:
                    carrito.mover_abajo()

                colisiones_restantes = gestor.verificar_colisiones()
                if colisiones_restantes:
                    gestor.procesar_colision(colisiones_restantes[0])
                    colisiones += 1

            gestor.distancia_recorrida = carrito.x - 50

            if gestor.verificar_condiciones_fin_juego():
                break

            pasos += 1

        resultados_escenarios.append(
            (nombre, pasos, colisiones, carrito.esta_vivo(), descripcion)
        )

    # Verificar que todos los escenarios funcionan
    for nombre, pasos, colisiones, vivo, descripcion in resultados_escenarios:
        assert pasos > 0, f"Escenario {nombre} debe haber avanzado"
        print(
            f"  {nombre}: {pasos} pasos, {colisiones} colisiones, vivo: {vivo} ({descripcion})"
        )

    print("‚úÖ M√∫ltiples escenarios: PAS√ì")


def test_consistencia_estado():
    """Prueba: Consistencia del estado del juego"""
    print("üß™ Probando consistencia del estado del juego...")

    gestor = GestorJuego()
    gestor.inicializar_juego()

    # Agregar obst√°culos
    for i in range(20):
        gestor.agregar_obstaculo(100 + i * 50, i % 3, TipoObstaculo.ROCA)

    carrito = gestor.carrito

    # Simular m√∫ltiples operaciones
    for paso in range(100):
        # Mover carrito
        carrito.mover_automaticamente()

        # Actualizar obst√°culos visibles
        gestor.actualizar_obstaculos_visibles()

        # Verificar consistencia del estado
        assert carrito.x >= 50, "Carrito no puede estar antes de la posici√≥n inicial"
        assert 0 <= carrito.y <= 2, "Carrito debe estar en carril v√°lido"
        assert 0 <= carrito.energia_actual <= carrito.energia_maxima, (
            "Energ√≠a debe estar en rango v√°lido"
        )
        assert gestor.distancia_recorrida >= 0, (
            "Distancia recorrida no puede ser negativa"
        )
        assert gestor.arbol_obstaculos.obtener_total_obstaculos() >= 0, (
            "N√∫mero de obst√°culos no puede ser negativo"
        )

        # Verificar colisiones
        colisiones = gestor.verificar_colisiones()
        if colisiones:
            # Procesar colisi√≥n
            gestor.procesar_colision(colisiones[0])

            # Verificar que el estado sigue siendo consistente
            assert carrito.energia_actual >= 0, (
                "Energ√≠a no puede ser negativa despu√©s de colisi√≥n"
            )

        # Actualizar distancia
        gestor.distancia_recorrida = carrito.x - 50

    print("‚úÖ Consistencia del estado: PAS√ì")


def main():
    """Ejecuta todas las pruebas de integraci√≥n completa"""
    print("üöÄ Iniciando pruebas de integraci√≥n completa...\n")
    print("=" * 60)

    try:
        test_partida_completa_exitosa()
        print()

        test_partida_fallida_por_energia()
        print()

        test_estrategias_diferentes()
        print()

        test_carga_configuracion_compleja()
        print()

        test_estadisticas_avanzadas()
        print()

        test_escenarios_multiples()
        print()

        test_consistencia_estado()
        print()

        print("=" * 60)
        print("üéâ ¬°TODAS LAS PRUEBAS DE INTEGRACI√ìN COMPLETA PASARON!")
        print("‚úÖ El sistema maneja escenarios reales de juego correctamente")

        return True

    except AssertionError as e:
        print(f"‚ùå Error en las pruebas de integraci√≥n: {e}")
        return False
    except Exception as e:
        print(f"üí• Error inesperado en pruebas de integraci√≥n: {e}")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
