#!/usr/bin/env python3
"""
Script de prueba para verificar las nuevas funcionalidades:
- 6 carriles (0-5)
- Eliminaci√≥n autom√°tica de obst√°culos pasados
- Nuevo sistema de puntuaci√≥n
"""

from logic.gestor_juego import GestorJuego
from logic.carrito import Carrito
from logic.obstaculo import Obstaculo, TipoObstaculo

def test_carriles():
    """Prueba el sistema de 6 carriles."""
    print("=== PRUEBA: Sistema de 6 carriles ===")
    
    carrito = Carrito(x_inicial=50, y_inicial=2)
    print(f"Carrito inicial en carril: {carrito.y}")
    
    # Probar movimientos
    for i in range(10):
        if carrito.y < 5:
            carrito.mover_arriba()
            print(f"Moviendo arriba -> carril: {carrito.y}")
        else:
            break
    
    for i in range(10):
        if carrito.y > 0:
            carrito.mover_abajo()
            print(f"Moviendo abajo -> carril: {carrito.y}")
        else:
            break
    
    print("‚úÖ Prueba de carriles completada\n")

def test_obstaculos_6_carriles():
    """Prueba obst√°culos en los 6 carriles."""
    print("=== PRUEBA: Obst√°culos en 6 carriles ===")
    
    gestor = GestorJuego()
    gestor.cargar_configuracion()
    
    # Crear obst√°culos en cada carril
    for carril in range(6):
        obstaculo = Obstaculo(x=100 + carril * 50, y=carril, tipo=TipoObstaculo.ROCA)
        resultado = gestor.arbol_obstaculos.insertar(obstaculo)
        print(f"Obst√°culo en carril {carril}: {'‚úÖ' if resultado else '‚ùå'}")
    
    print(f"Total de obst√°culos: {gestor.arbol_obstaculos.obtener_total_obstaculos()}")
    
    # Probar b√∫squeda por rango
    obstaculos_visibles = gestor.arbol_obstaculos.buscar_en_rango(0, 500, 0, 5)
    print(f"Obst√°culos en rango (0-500, carriles 0-5): {len(obstaculos_visibles)}")
    
    print("‚úÖ Prueba de obst√°culos completada\n")

def test_eliminacion_automatica():
    """Prueba la eliminaci√≥n autom√°tica de obst√°culos."""
    print("=== PRUEBA: Eliminaci√≥n autom√°tica ===")
    
    gestor = GestorJuego()
    gestor.cargar_configuracion()
    
    print(f"Obst√°culos iniciales: {gestor.arbol_obstaculos.obtener_total_obstaculos()}")
    
    # Simular que el carrito avanza mucho
    gestor.inicializar_juego()
    gestor.carrito.x = 3000  # Mover carrito muy adelante
    
    # Actualizar para eliminar obst√°culos pasados
    gestor.eliminar_obstaculos_pasados()
    
    print(f"Obst√°culos despu√©s de eliminaci√≥n: {gestor.arbol_obstaculos.obtener_total_obstaculos()}")
    print("‚úÖ Prueba de eliminaci√≥n completada\n")

if __name__ == "__main__":
    print("üöó Probando nuevas funcionalidades del juego de carrito\n")
    
    try:
        test_carriles()
        test_obstaculos_6_carriles()
        test_eliminacion_automatica()
        
        print("üéâ ¬°Todas las pruebas completadas exitosamente!")
        
    except Exception as e:
        print(f"‚ùå Error en las pruebas: {e}")
        import traceback
        traceback.print_exc()